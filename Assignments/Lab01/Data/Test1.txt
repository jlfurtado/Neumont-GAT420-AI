GAT420 – Artificial Intelligence
Lab 01 – Hash Tables

Student Outcomes
The student will get practice setting up a new project from scratch in the latest Visual Studio version.

Students will learn about hash functions and hash tables.

Students will get some more experience working with singly-linked lists.

Students will experiment with various aspects of hash tables including 
•	varying the hash function and seeing how it affects storage statistics and thus performance
•	varying the hash table size for similar reasons

Students will get practice designing their code and refactoring.

Students will be able to apply the concepts presented in this lab to the coming Spatial Partitioning lab which will implement a uniform 3D grid with spatial hashing.

Even though this lab is not about AI, it will be useful to help us build other things that will be useful for later AI.

Use Visual Studio Enterprise 2017.
Create a new Win32 Console app. 
•	Remember to use Warning Level 4 (or higher ??)
•	A filename and tableSize will be read from the command args or a config file.
•	Logging would be nice, but it’s up to you.
•	This app will read in a text file line by line extracting all words from each line.
o	A word consists of consecutive letters [a-zA-z] and possibly including a single apostrophe not at the front of the word (example: isn’t).
o	A word like “Win32” will be rejected/ignored, as will “[a-zA-z]”.
o	Each word will be lower-cased and then added to the app’s database of unique words.
•	The database will be implemented as a hash table where each entry in the table is a singly-linked list of words that hashed to the same index.]
o	Words will be added to the front of the linked list. This makes insertion extremely fast, just hash the word and insert, boom!
Use a small set of words to start with (like one sentence from this lab doc). Make sure you drop duplicates.
Once you are confident it is working OK, use all the words from this lab doc. Then find a large database of words somehow, like 100,000 or more words. Rinse and repeat.
Eventually, for each hash function, test/time it by adding all your words, then attempt to add them all again, they should all be rejected and it will give an idea of a pretty bad scenario.
The interface to your hash table should include at least the following:
•	InsertWord(), ContainsWord(), NumberOfWords(), NumberOfDuplicates(), DisplayStats().
•	InsertWord() returns true if the word was inserted, false if word is already present.
•	Obviously you have to keep track of how many words were inserted as well as how many were not.
•	DisplayStats() will go through the table, without walking any of the lists, and will display the following info:
o	How many table entries there are.
o	How many words there are total.
o	The smallest number of words in any entry, and how many entries have this number.
o	The largest number of words in any entry, and how many entries have this number.
o	Awesomeness factor: The average difference from the ideal average for each entry, in absolute value.
o	The ideal number of words per entry.
o	Any other info that would be useful to help determine the quality of the hash function for this set of words.

All of the words should be stored in one giant character array in static memory, that is, neither heap nor stack memory.
•	Abc\0hello\0world\0how\0are\0you\0today\0etc\0…
•	Encapsulate this in a class so you can easily change the implementation details later without having to modify any other code.

The hash functions you will try include the following:
•	Return 0 – just make sure that this actually works for your smaller sets of words
•	Return the ascii value of the first letter of the word
•	Return the sum of the ascii values of the first three letters of the word (or, for example, two for “or” or one for “a”).
•	Return the sum of the ascii values of all the letters in the word.
•	Return the xor of the ascii values of all the letters in the word, left shifting by n for the nth letter.
o	Example : cat
o	Ascii values are 99, 97, 116
o	Binary values are 0110 0011 (c), 0110 0001 (a), 0111 0100 (t)
o	Shifting left by 0, 1, 2:
?	0 shifting c: 0110 0011
?	1 shifting a: 1100 0010
?	2 shifting t: 0001 1101 0000
o	Xor result: 0001 0111 0001 or something I think
•	One other of your own experimentation that works better than any of these
Submission Requirents
Your code should be on your bitbucket account that I have access to, just like last quarter, with an Assignments folder and a Code folder.

Please submit a Readme doc to the LMS for this lab.
The readme should talk about the different data sets that you used.
The readme should describe each of the hash functions you used and talk about how good or bad they were for the different data sets. 
Draw some sort of conclusion about hash functions. How do the hash functions affect the lookup of large numbers of words?
What are your impressions of the usefulness of hash tables?
You should strive to figure out what sort of data you could add to the readme doc that you would want if you were the manager/boss/instructor.

